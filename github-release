#!/usr/bin/env python

import argparse
import json
import os
import subprocess
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import github
from cola import core
from cola.interaction import Interaction


def main():
    args = parse_args()
    return args.func(args)


def usage(args):
    print(args)
    return 0


def error(msg):
    core.print_stderr('error: %s' % msg)
    sys.exit(1)


def when_undef(var):
    if var is None:
        result = Error()
    else:
        result = NoOp()
    return result


def unless(var):
    if var:
        result = NoOp()
    else:
        result = Error()
    return result


class NoOp(object):

    def error(self, msg):
        # nothing
        return

class Error(object):

    def error(self, msg):
        # a predicate failed
        error(msg)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--user', help='github user',
                        metavar='<user>', default='git-cola')
    parser.add_argument('-r', '--repo', help='github repo',
                        metavar='<repo>', default='git-cola')
    subparsers = parser.add_subparsers()

    listcmd = subparsers.add_parser('list')
    listcmd.set_defaults(func=print_releases)

    create = subparsers.add_parser('create')
    create.set_defaults(func=create_release)
    add_release_arguments(create)

    edit = subparsers.add_parser('edit')
    edit.set_defaults(func=edit_release)
    add_release_arguments(edit)

    delete = subparsers.add_parser('delete')
    delete.set_defaults(func=delete_release)
    add_version_arguments(delete)

    identify = subparsers.add_parser('get')
    identify.set_defaults(func=get_release)
    add_version_arguments(identify)
    identify.add_argument('--show-id', action='store_true', default=False,
                          help='show the release ID only')

    upload = subparsers.add_parser('upload')
    upload.set_defaults(func=upload_file)
    add_version_arguments(upload)
    upload.add_argument('filename', metavar='<filename>',
                        help='file to upload')

    return parser.parse_args()


def add_version_arguments(parser):
    parser.add_argument('version', metavar='<version>',
                         help='release version')

def add_release_arguments(parser):
    add_version_arguments(parser)
    parser.add_argument('commit', metavar='<commit>', nargs='?', default=None,
                        help='commit to use for the release')
    parser.add_argument('--draft', action='store_true', default=False,
                        help='create draft (unpublished) release')
    parser.add_argument('--prerelease', action='store_true', default=False,
                        help='create preview release')

# commands

def print_releases(args):
    api = github.GithubAPI()
    resp = api.get('/repos/%s/%s/releases' % (args.user, args.repo))
    print_response(resp)
    return 0


def create_release(args):
    add_commit(args)
    print_release_info(args)
    if not Interaction.confirm('Creating release %s' % args.version,
                               'This will create a new release on github.',
                               'After creation, assets can be uploaded.',
                               'Create release'):
        return 1
    data = new_release_data(args)
    url = '/repos/%s/%s/releases' % (args.user, args.repo)
    api = github.GithubAPI()
    resp = api.post(url, data=json.dumps(data))
    print_response(resp)
    return 0


def edit_release(args):
    add_commit(args)
    details = release_details(args)
    if details is None:
        return 1
    release_id = details['id']
    print_release_info(args)
    if not Interaction.confirm('Editing release %s' % args.version,
                               'This will edit an existing release on github.',
                               'The release must exist before editing.',
                               'Edit release'):
        return 1
    data = new_release_data(args)
    url = '/repos/%s/%s/releases/%s' % (args.user, args.repo, release_id)
    api = github.GithubAPI()
    resp = api.patch(url, data=json.dumps(data))
    print_response(resp)
    return 0


def delete_release(args):
    details = release_details(args)
    if details is None:
        return 1
    release_id = details['id']
    if not Interaction.confirm('Deleting release %s' % args.version,
                               'This will delete a release from github.',
                               'This cannot be undone.',
                               'Delete release'):
        return 1

    url = '/repos/%s/%s/releases/%s' % (args.user, args.repo, release_id)
    api = github.GithubAPI()
    resp = api.delete(url)
    print_response(resp)
    return 0


def get_release(args):
    details = release_details(args)
    when_undef(details).error('could not identify %s' % args.version)
    if args.show_id:
        core.print_stdout(str(details['id']))
    else:
        core.print_stdout(json.dumps(details, indent=4, sort_keys=True))
    return 0


def upload_file(args):
    details = release_details(args)
    when_undef(details).error('could not identify %s' % args.version)

    filename = args.filename
    upload_url = details['upload_url']
    suffix = '{?name,label}'
    unless(upload_url.endswith(suffix)).error(
        'upload_url "%s" does not end with "%s"' % (upload_url, suffix))

    url = details['upload_url'][:-len(suffix)]
    url += '?name=' + os.path.basename(filename)

    api = github.GithubAPI()
    headers = api.upload_headers(filename)

    cmd = ['curl', '--progress-bar', '--request', 'POST']
    for header in headers:
        cmd.append('--header')
        cmd.append(header)
    cmd.append('--data-binary')
    cmd.append('@' + filename)
    cmd.append(url)

    core.print_stdout('$ ' + subprocess.list2cmdline(cmd))
    status, out, err = core.run_command(cmd, stderr=None, stdout=None)
    if out:
        core.print_stdout(out)
    if err:
        core.print_stderr(err)
    return status

# helpers

def beautify(jsonstr):
    try:
        return json.dumps(json.loads(jsonstr), indent=4, sort_keys=True)
    except:
        return jsonstr


def print_response(resp, printer=core.print_stdout):
    printer('/* %s */' % resp.status_code)
    printer(beautify(resp.text))


def add_commit(args):
    if args.commit:
        return
    cmd = ['git', 'rev-parse', args.version+'^{commit}']
    status, out, err = core.run_command(cmd)
    args.commit = out.strip()


def print_release_info(args):
    data = new_release_data(args)
    json.dump(data, sys.stdout, indent=4, sort_keys=True)


def new_release_data(args):
    data = {}
    data['draft'] = args.draft
    data['description'] = 'git-cola %s' % args.version
    data['name'] = args.version
    data['prerelease'] = args.prerelease
    data['tag_name'] = args.version
    data['target_commitish'] = args.commit
    return data


def release_details(args):
    api = github.GithubAPI()
    resp = api.get('/repos/%s/%s/releases' % (args.user, args.repo))
    if resp.status_code != 200:
        print_response(resp, printer=core.print_stderr)
        return None
    releases = json.loads(resp.text)
    for release in releases:
        if release['tag_name'] == args.version:
            return release
    return None


if __name__ == '__main__':
    sys.exit(main())
